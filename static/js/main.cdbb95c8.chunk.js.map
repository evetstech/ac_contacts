{"version":3,"sources":["features/contacts/ContactSlice.ts","common/components/table/Header.tsx","common/components/table/Row.tsx","common/components/table/Table.tsx","common/services/Fetch.ts","features/contacts/Contacts.tsx","common/components/button/Button.tsx","common/components/textinput/TextInput.tsx","common/services/RowDataFormatter.ts","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["FetchState","Header","columns","sortColumn","className","type","disabled","map","column","index","key","description","length","RowControl","Row","row","useState","isSelected","setIsSelected","onCheckboxClick","useCallback","prevState","onClick","initials","dataPath","Table","rows","style","textAlign","height","colSpan","AC_ENDPOINT","FetchGet","apiKey","a","endpoint","axios","get","headers","result","Component","initialState","contactsData","tags","contactTags","deals","geoIps","geoAddresses","contacts","status","Idle","mapIdToKey","dataArray","mappedObject","obj","id","ContactSlice","createSlice","name","reducers","addContactsData","state","action","payload","setStatus","setErrorMessage","errorMessage","actions","selectContacts","contact","selectDeals","selectTags","selectContactTags","selectGeoIps","selectGeoAddresses","selectStatus","Button","text","loadingStatus","Fetching","TextInput","placeholder","error","onTextChange","hasFocus","setHasFocus","compressedText","setCompressedText","onFocus","onBlur","handleTextChange","e","target","value","substring","onChange","RowDataFormatter","dealCount","valueTotal","dealIds","currencyType","dealId","currency","isNaN","parseInt","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","getDealTotal","tagString","tagIds","tagId","tag","getTags","location","geoIpsIds","locationString","geoAddress","city","country2","getLocation","push","firstName","lastName","charAt","withApiFetching","props","useSelector","apiToken","setApiToken","dispatch","useDispatch","onSubmitApi","Error","data","Success","useMemo","App","store","configureStore","reducer","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.cdbb95c8.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AppThunk, RootState } from '../../app/store';\nimport { FetchGet } from '../../common/services/Fetch';\n\nexport enum FetchState {\n  Idle,\n  Fetching,\n  Success,\n  Error\n};\n\n//i was debating on writing an interface for each endpoint object, but decided against it;\n//there shouldn't be a hard coupling of backend and front end.\ninterface ContactsData {\n  tags: LooseObject,\n  contactTags: LooseObject,\n  deals: LooseObject,\n  geoIps: Array<LooseObject>,\n  geoAddresses: LooseObject,\n  contacts: Array<LooseObject>\n};\n\ninterface ContactState {\n  contactsData: ContactsData,\n  status: FetchState,\n  errorMessage?: string\n};\n\nexport interface LooseObject {\n  [T: string]: any\n};\n\nconst initialState: ContactState = {\n  contactsData: {\n    tags: {},\n    contactTags: {},\n    deals: {},\n    geoIps: [],\n    geoAddresses: {},\n    contacts: []\n  },\n  status: FetchState.Idle\n};\n\nconst mapIdToKey = (dataArray: Array<LooseObject>) => {\n  const mappedObject: LooseObject = {};\n  if(!dataArray) {\n    return {};\n  }\n\n  dataArray.map(obj => {\n    if(obj.id) {\n      mappedObject[obj.id] = obj;\n    }\n    return obj;\n  });\n  \n  return mappedObject;\n}\n\n// redux toolkit use immer by default.  there are tradeoffs between immer and immutable.js\nexport const ContactSlice = createSlice({\n  name: 'contact',\n  initialState,\n  reducers: {\n    addContactsData: (state, action: PayloadAction<ContactsData>) => {\n      state.contactsData.tags = action.payload.tags;\n      state.contactsData.contactTags = action.payload.contactTags;\n      state.contactsData.deals = action.payload.deals;\n      state.contactsData.geoIps = action.payload.geoIps;\n      state.contactsData.geoAddresses = action.payload.geoAddresses;\n      state.contactsData.contacts = action.payload.contacts;\n    },\n    setStatus: (state, action: PayloadAction<number>) => {\n      state.status = action.payload;\n    },\n    setErrorMessage: (state, action: PayloadAction<string>) => {\n      state.errorMessage = action.payload;\n    }\n  },\n});\n\nexport const { addContactsData, setStatus, setErrorMessage } = ContactSlice.actions;\n\nexport const addContactsAsync = (apiKey: string, endpoint?: string): AppThunk => {\n  return async dispatch => {\n    dispatch(setStatus(FetchState.Fetching));\n    \n    try {\n      //do fetch logic here\n      const result = await FetchGet(apiKey, endpoint);\n      if(result.status !== 200) {\n        dispatch(setStatus(FetchState.Error));\n        dispatch(setErrorMessage('There was an error retrieving contacts'));\n      }\n      const data = {\n        geoIps: result.data.geoIps,\n        geoAddresses: mapIdToKey(result.data.geoAddresses),\n        contacts: result.data.contacts,\n        deals: mapIdToKey(result.data.deals),\n        tags: mapIdToKey(result.data.tags),\n        contactTags: mapIdToKey(result.data.contactTags)\n      };\n      dispatch(setStatus(FetchState.Success));\n      dispatch(addContactsData(data));\n    } catch (error) {\n      dispatch(setStatus(FetchState.Error));\n      dispatch(setErrorMessage('Something went really bad!'));\n      // console.error(error);\n    }\n  }\n};\n\nexport const selectContacts = (state: RootState) => state.contact.contactsData.contacts;\nexport const selectDeals = (state: RootState) => state.contact.contactsData.deals;\nexport const selectTags = (state: RootState) => state.contact.contactsData.tags;\nexport const selectContactTags = (state: RootState) => state.contact.contactsData.contactTags;\nexport const selectGeoIps = (state: RootState) => state.contact.contactsData.geoIps;\nexport const selectGeoAddresses = (state: RootState) => state.contact.contactsData.geoAddresses;\nexport const selectStatus = (state: RootState) => state.contact.status;\n\nexport default ContactSlice.reducer;\n","import React, { FunctionComponent } from 'react';\nimport './Header.scss';\n\nexport type HeaderObj = {\n  description: string,\n  dataPath: string\n};\n\ntype HeaderProps = {\n  columns: Array<HeaderObj>,\n  sortColumn: string\n};\n\nconst Header: FunctionComponent<HeaderProps> = ({ columns, sortColumn }) => {\n  return (\n    <>\n      <tr className='header-row'>\n        <th><input type='checkbox' disabled={true} /></th>\n        {columns.map((column, index) => (\n          <th key={index}>\n            <div>\n              {column.description}\n              {column.description === sortColumn && <div className='arrow-down' />}\n              {index === columns.length - 1 && <span>&#x25a0; &#x25a0; &#x25a0;</span>}\n            </div>\n          </th>\n        ))}\n      </tr>\n    </>\n  );\n};\n\nexport default Header;","import React, { FunctionComponent, useState, useCallback } from 'react';\nimport { HeaderObj } from './Header';\nimport './Row.scss';\n\nexport type RowObj = {\n  [T: string]: any,\n  name: string,\n  value: string,\n  location?: string,\n  deals: number,\n  tags?: string\n  initials: string\n};\n\ntype RowProps = {\n  row: RowObj,\n  columns: Array<HeaderObj>\n};\n\nconst RowControl: FunctionComponent = () => {\n  return (\n    <>\n      <p />\n      <div className={'ctrl-btn-wrap'}>\n        <div className={'inner-txt-before'}>Email</div>\n        <span />\n      </div>\n    </>\n  );\n};\n\nconst Row: FunctionComponent<RowProps> = ({ row, columns }) => {\n  const [isSelected, setIsSelected] = useState(false);\n\n  const onCheckboxClick = useCallback(() => {\n    setIsSelected(prevState => !prevState);\n  }, [setIsSelected]);\n  return (\n    <>\n      <tr className={isSelected ? 'table-row-selected' : 'table-row'}>\n        <td>\n          <input type='checkbox' onClick={onCheckboxClick} />\n        </td>\n        {columns.map((column, index) => (\n          <td key={index}>\n            <div>\n              {column.description === 'Contact' && <div className='circle-initials'>{row.initials && row.initials}</div>}\n              {row[column.dataPath] && row[column.dataPath]}\n              {index === columns.length - 1 && isSelected && <RowControl />}\n            </div>\n          </td>\n        ))}\n      </tr>\n    </>\n  );\n};\n\nexport default Row;","import React, { FunctionComponent } from 'react';\nimport Header, { HeaderObj } from './Header';\nimport Row, { RowObj } from './Row';\nimport './Table.scss';\n\ntype TableProps = {\n  columns: Array<HeaderObj>,\n  rows: Array<RowObj>,\n  sortColumn: string\n};\n\nconst Table: FunctionComponent<TableProps> = ({ columns, rows, sortColumn }) => {\n  return (\n    <table className='table'>\n      <thead className='thead'>\n        <Header sortColumn={sortColumn} columns={columns} />\n      </thead>\n      <tbody>\n        {rows.length > 0 ? rows.map((row, index) => <Row key={index} columns={columns} row={row} />)\n        : <tr><td style={{textAlign:'center', height: '46px'}}colSpan={6}>No Data Available</td></tr>}\n      </tbody>\n    </table>\n  );\n};\n\nexport default Table;","import axios from 'axios';\n\nexport const AC_ENDPOINT = 'https://sahmed93846.api-us1.com/api/3/contacts?include=contactTags.tag,deals,geoIps.geoAddress&limit=30';\n\nexport const FetchGet = async (apiKey: string, endpoint: string = AC_ENDPOINT) => {\n  const result = await axios.get('https://cors-anywhere.herokuapp.com/' + endpoint, {\n    headers: {\n      'Api-Token': apiKey\n    }\n  });\n\n  return result;\n};","import React, { useMemo, ComponentType, useState, useCallback } from 'react';\nimport Table from '../../common/components/table/Table';\nimport Button from '../../common/components/button/Button';\nimport TextInput from '../../common/components/textinput/TextInput';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { LooseObject, selectContacts, selectDeals, selectTags, selectContactTags, selectGeoIps, selectGeoAddresses, selectStatus, addContactsAsync } from './ContactSlice';\nimport { RowObj } from '../../common/components/table/Row';\nimport RowDataFormatter from '../../common/services/RowDataFormatter';\nimport './Contacts.scss';\n\ntype TableData = {\n  readonly contacts: Array<LooseObject>,\n  readonly deals: LooseObject,\n  readonly tags: LooseObject,\n  readonly contactTags: LooseObject,\n  readonly geoIps: Array<LooseObject>,\n  readonly geoAddresses: LooseObject\n};\n\nconst Header = [\n  { description: 'Contact', dataPath: 'name' },\n  { description: 'Total Value', dataPath: 'value' },\n  { description: 'Location', dataPath: 'location' },\n  { description: 'Deals', dataPath: 'deals' },\n  { description: 'Tags', dataPath: 'tags' }\n];\n\nexport const withApiFetching = (Component: ComponentType<any>) => (props: any) => {\n  const status = useSelector(selectStatus);\n  const [apiToken, setApiToken] = useState('');\n  const dispatch = useDispatch();\n\n  const onTextChange = useCallback((value) => {\n    setApiToken(value);\n  }, [setApiToken]);\n\n  const onSubmitApi = useCallback(() => {\n    dispatch(addContactsAsync(apiToken));\n  }, [apiToken, dispatch]);\n\n  return (\n    <>\n      <div className='api-wrap'>\n        <TextInput text={apiToken} onTextChange={onTextChange} placeholder='API Token' error={status === 3} disabled={status === 1} />\n        <Button loadingStatus={status} text={'Submit'} onClick={onSubmitApi} />\n      </div>\n      <Component {...props} />\n    </>\n  )\n};\n\nexport const withTableData = (Component: ComponentType<any>) => (props: any) => {\n  const contacts = useSelector(selectContacts);\n  const deals = useSelector(selectDeals);\n  const tags = useSelector(selectTags);\n  const contactTags = useSelector(selectContactTags);\n  const geoIps = useSelector(selectGeoIps);\n  const geoAddresses = useSelector(selectGeoAddresses);\n\n  return (\n    <Component contacts={contacts} deals={deals} tags={tags} contactTags={contactTags} geoIps={geoIps} geoAddresses={geoAddresses} {...props} />\n  );\n};\n\nconst Contacts: React.FC<TableData> = ({ contacts, deals, tags, contactTags, geoIps, geoAddresses }) => {\n  // this is hardcoded for now since the pull on the API is sorted by contacts/asc\n  // but if we were to implement sorting, around this area would be where we would implement the logic\n  // const [sortIndicatorColumn, setSortIndicatorColumn] = useState();\n  // const [sortDirection, setSortDirection] = useState('ASC');\n\n  const rows: Array<RowObj> = useMemo(() =>\n    RowDataFormatter(contacts, deals, tags, contactTags, geoIps, geoAddresses)\n    , [contacts, deals, tags, contactTags, geoIps, geoAddresses]);\n\n  return (\n    <div className='contacts-top-wrap'>\n      <Table sortColumn='Contact' columns={Header} rows={rows} />\n    </div>\n  );\n};\n\nexport default withApiFetching(withTableData(Contacts));","import React, { FunctionComponent } from 'react';\nimport './Button.scss';\nimport { FetchState } from '../../../features/contacts/ContactSlice';\n\ntype ButtonProps = {\n  text?: string,\n  loadingStatus?: FetchState,\n  onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void\n};\n\nconst Button: FunctionComponent<ButtonProps> = ({text, loadingStatus, onClick = () => {}}) => {\n  return (\n    <button className='btn' onClick={onClick} disabled={loadingStatus === FetchState.Fetching}>\n      {loadingStatus !== FetchState.Fetching ? text :  <span/>}\n    </button>\n  );\n};\n\nexport default Button;","import React, { FunctionComponent, useState, useCallback } from 'react';\nimport './TextInput.scss';\n\ntype TextInputProps = {\n  placeholder?: string,\n  error?: boolean,\n  onTextChange?: (ev: React.ChangeEvent<HTMLInputElement>) => void,\n  text?: string,\n  disabled?: boolean\n};\n\nconst TextInput: FunctionComponent<TextInputProps> = ({ placeholder, error, onTextChange = () => {}, text, disabled }) => {\n  const [hasFocus, setHasFocus] = useState(false);\n  const [compressedText, setCompressedText] = useState(text);\n\n  const onFocus = useCallback(() => {\n    setHasFocus(true);\n  }, [setHasFocus]);\n\n  const onBlur = useCallback(() => {\n    setHasFocus(false);\n  }, [setHasFocus]);\n\n  const handleTextChange = useCallback((e) => {\n    onTextChange(e.target.value);\n\n    if (e.target.value.length > 26) {\n      setCompressedText(e.target.value.substring(0, 24) + '...');\n    } else {\n      setCompressedText(e.target.value);\n    }\n  }, [onTextChange]);\n\n  return (\n    <input\n      className={error ? 'input-error' : 'input-normal'}\n      type='text'\n      value={hasFocus && text ? text : compressedText}\n      onChange={handleTextChange}\n      onFocus={onFocus}\n      onBlur={onBlur}\n      disabled={disabled}\n      placeholder={placeholder} />\n  );\n};\n\nexport default TextInput;","import { LooseObject } from '../../features/contacts/ContactSlice';\nimport { RowObj } from '../components/table/Row';\n\nconst getDealTotal = (dealIds: Array<number>, deals: LooseObject): string => {\n  let currencyType: string = 'usd';\n  let valueTotal: number = 0;\n\n  dealIds.map((dealId: number, index: number) => {\n    if (index === 0) {\n      currencyType = deals[dealId].currency;\n    }\n    if (!isNaN(deals[dealId].value)) {\n      valueTotal += parseInt(deals[dealId].value);\n    }\n\n    return dealId;\n  });\n\n  return new Intl.NumberFormat(currencyType, { style: 'currency', currency: currencyType, minimumFractionDigits: 0, maximumFractionDigits: 0 }).format(valueTotal);\n};\n\nconst getTags = (tagIds: Array<number>, contactTags: LooseObject, tags: LooseObject): string => {\n  let tagString = '';\n\n  tagIds.map((tagId, index) => {\n    tagString += `${tags[contactTags[tagId].tag].tag}`;\n\n    if(index !== tagIds.length-1) {\n      tagString += ', ';\n    }\n\n    return tagId;\n  });\n\n  return tagString;\n};\n\n//this is just going by the object example in the api docs, unsure if this will work with real data\nconst getLocation = (geoIpsIds: Array<number>, geoIps: Array<LooseObject>, geoAddresses: LooseObject): string => {\n  let locationString = '';\n  \n  //assumption of having only 1 address, or if there is multiple you would only use the first one\n  if(geoIpsIds[0]) {\n    const geoAddress = geoAddresses[geoIps[0].id];\n    locationString = `${geoAddress.city}, ${geoAddress.state}, ${geoAddress.country2}`;\n  }\n\n  return locationString;\n};\n\n// full name, currency type + total value of deals, number of deals, location, tags\nconst RowDataFormatter = (contacts: Array<LooseObject>, deals: LooseObject, tags: LooseObject, contactTags: LooseObject, geoIps: Array<LooseObject>, geoAddresses: LooseObject) => {\n  const rows: Array<RowObj> = [];\n\n  contacts.map(contact => {\n    const dealCount: number = contact.deals.length;\n    const valueTotal = getDealTotal(contact.deals, deals);\n    const tagString = getTags(contact.contactTags, contactTags, tags);\n    const location = getLocation(contact.geoIps, geoIps, geoAddresses);\n\n    rows.push({\n      name: (contact.firstName ? contact.firstName + ' ' : '') + (contact.lastName ? contact.lastName : ''),\n      initials: (contact.firstName ? contact.firstName.charAt(0) : '?') + (contact.lastName ? contact.lastName.charAt(0) : '?'),\n      value: valueTotal,\n      deals: dealCount,\n      location: location,\n      tags: tagString\n    });\n\n    return contact;\n  });\n\n  return rows;\n};\n\nexport default RowDataFormatter;","import React, { FunctionComponent } from 'react';\r\nimport './App.scss';\r\nimport Contacts from './features/contacts/Contacts';\r\n\r\nconst App: FunctionComponent = () => {\r\n  return (\r\n    <div className='top-level-wrapper'>\r\n      <Contacts />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport ContactSlice from '../features/contacts/ContactSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contact: ContactSlice,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n/* istanbul ignore file */\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}